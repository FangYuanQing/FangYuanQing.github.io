<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>服务器项目部署常用指令</title>
      <link href="/2020/09/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/09/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器项目部署常用指令"><a href="#服务器项目部署常用指令" class="headerlink" title="服务器项目部署常用指令"></a>服务器项目部署常用指令</h2><h3 id="一、项目启动"><a href="#一、项目启动" class="headerlink" title="一、项目启动"></a>一、项目启动</h3><blockquote><ul><li><p><strong>ps -ef|grep java              ——看有关java的进程    ps -ef是显示所有进程信息   后面那个grep是匹配的意思</strong></p></li><li><p><strong>kill -9 123123 213231         ——后面两个数字是两个进程的进程号pid，多少个进程要kill好像都可以写在后面</strong></p></li><li><p>nohup java -jar xxxxx.jar &amp;   ——后台启动java工程的命令<br>后面加个&amp;的命令是后台运行的意思；<br>nohup是no hang up，不挂起，就用户退出还可以运行的意思（好像是这样）。   </p><p>如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件:<br>nohup java -jar xxxx.jar &gt; myout.out 2&gt;&amp;1 &amp;<br>这个2&gt;1&amp;的意思就是将标准错误重定向到标准输出。</p></li><li><p>tail -f nohup.out            ——可以实时监控刚刚那个后台java命令的输出。 额进去了好像就要一直看着它更新，不能干其他的事，可以用ctrl+z强制退出，反正只是退出这个监控。</p></li></ul></blockquote><h2 id="二、防火墙"><a href="#二、防火墙" class="headerlink" title="二、防火墙"></a>二、防火墙</h2><blockquote><ul><li><p>systemctl start firewalld.service          ——启动防火墙服务（启动一个服务）</p></li><li><p>systemctl stop firewalld.service           ——关闭防火墙服务（关闭一个服务）</p></li><li><p>systemctl restart firewalld.service        ——重启防火墙服务（重启一个服务）</p></li><li><p>systemctl status firewalld.service         ——显示防火墙服务的状态（显示一个服务的状态）</p></li><li><p>systemctl enable firewalld.service         ——开机启动防火墙</p></li><li><p>systemctl disable firewalld.service        ——开机禁止启动防火墙</p></li><li><p>systemctl is-enabled firewalld.service     ——查看防火墙是不是开机启动</p></li><li><p>systemctl list-unit-files|grep enabled     ——查看已经启动的服务列表</p></li><li><p>systemctl –failed                         ——查看启动失败的服务列表</p></li><li><p>systemctl daemon-reload                    ——刚刚配置的服务需要让systemctl能识别，就必须刷新配置</p></li><li><p>firewall-cmd –state                       ——显示防火墙状态</p></li><li><p>firewall-cmd –zone=public –list-ports    ——查看防火墙中所有打开的端口</p></li><li><p>firewall-cmd –reload                      ——更新防火墙规则 实例，开80端口 </p></li><li><p>firewall-cmd –zone=public –add-port=80/tcp –permanent           ——permanent永久生效，没有这个参数重启后就失效</p></li><li><p>firewall-cmd –reload                                              ——刷新一下防火墙</p></li><li><p>firewall-cmd –zone=public –query-port=80/tcp                    ——查看一下防火墙80端口</p></li><li><p>firewall-cmd –zone=public –remove-port=80/tcp –permanent       ——删除这个端口的开放</p></li></ul></blockquote><h2 id="三、用shell启动jar项目"><a href="#三、用shell启动jar项目" class="headerlink" title="三、用shell启动jar项目"></a>三、用shell启动jar项目</h2><p>1.在指定位置下创建.sh文件</p><pre><code class="shell">vim xxx.sh</code></pre><p>2.编辑xxx.sh</p><pre><code>#/bin/bashnohup java -jar /usr/local/java/jar/项目.jar  &gt; /usr/local/java/log/日志.log 2&gt;&amp;1 &amp;</code></pre><p>3.启动shell脚本</p><pre><code>./xxx.sh     //需要在当前文件夹内执行</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/09/10/hello-world/"/>
      <url>/2020/09/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
